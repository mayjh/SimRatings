### Design Matrices and Other Errata
map= (item-1)*I+option
Xitem=matrix(0,nrow=I*J*K,ncol=I*J)
Xitem[cbind(1:(I*J*K),map)]=1
sub0=sub
sub0[option>1]=0
Xsub=matrix(0,nrow=I*J*K,ncol=K)
Xsub[cbind(1:(I*J*K),sub0)]=-1
X=cbind(Xitem,Xsub)
crossX=crossprod(X)
t.s2=.4
t.s2.beta=(.35)^2
t.beta=rnorm(K,0,sqrt(t.s2.beta))
t.mu.sens=.5
t.s2.sens=(.2)^2
t.sens=rnorm(J,t.mu.sens,sqrt(t.s2.sens))
t.mu.center=1
t.s2.center=(.2)^2
t.center=rnorm(J,t.mu.center,sqrt(t.s2.center))
t.s2.resp=(.2)^2
t.alpha=matrix(nrow=J,ncol=I)
for (j in 1:J) t.alpha[j,]=sort(rnorm(3,t.center[j],sqrt(t.s2.resp)),decreasing=F)
t.alpha[,1]= t.alpha[,1]-t.sens
t.alpha.m=as.vector(t(t.alpha))
t.block=c(t.alpha.m,t.beta)
t.cell=X%*%t.block
t.psi=runif(K,1,2)
order1=function(x) (order(x))[1]
z=rnorm(I*J*K,t.cell,sqrt(t.s2))
z.m=tapply(z,list(item,sub),min)
choice.m=tapply(z,list(item,sub),order1)
rt=exp(z.m[cbind(item.r,sub.r)])+t.psi[sub.r]
choice=choice.m[cbind(item.r,sub.r)]
acc=(choice==1)
dat=cbind(sub.r,item.r,choice,acc,round(rt,3))
colnames(dat)=c("sub","item","choice","acc","rt")
write.table(file='d1.dat',dat,quote=F,row.names=F)
Xwin=matrix(0,nrow=J*K,ncol=I)
Xwin[cbind(1:(J*K),choice)]=1
win=as.logical(as.vector(t(Xwin)))
#####################################
######################################
set.seed(seed)
#Analysis
rtruncnorm.pcl = function(N,mu=0,sigma=1,t1,t2)
{
u=runif(N,pnorm(t1,mu,sigma),pnorm(t2,mu,sigma))
qnorm(u,mu,sigma)
}
lpt0=function(t0,x,mu,s2)  sum(dlnorm(x-t0,mu,sqrt(s2),log=T))
###
M=5000
keep=1:M
tp=K+I*J
IJK=I*J*K
alpha=1:(I*J)
beta=(I*J+1):tp
theta=matrix(nrow=M,ncol=tp)
psi=matrix(nrow=M,ncol=K)
psiCandSD=.08
psiCounter=rep(0,K)
s2=1:M
s2.beta=1:M
a=1
b=.1
theta[1,]=sample(t.block)
psi[1,]=tapply(rt,sub.r,min)-.2
s2[1]=runif(1,.1,.7)
s2.alpha=5
s2.beta[1]=runif(1,.1,.9)^2
z=1:IJK
for (m in 2:M)
{
#########latent data
center=X%*%theta[m-1,]
y=rep(log(rt-psi[m-1,sub.r]),each=3)
z[win]=y[win]
z[!win]=rtruncnorm.pcl(sum(!win),mu=center[!win],sigma=sqrt(s2[m-1]),t1=y[!win],t2=Inf)
##########block
B=diag(c(1/rep(s2.alpha,I*J),1/rep(s2.beta[m-1],K)))
mu0=c(rep(0,I*J),rep(0,K))
cond.var = solve(crossX/s2[m-1]+B)
cond.mean = cond.var%*%(((t(X)%*%z)/s2[m-1])+B%*%mu0)
theta[m,] = mvrnorm(n=1, cond.mean, cond.var)
###########s2.beta
rate=sum((theta[m,beta])^2)/2+b
s2.beta[m]=1/rgamma(1,shape=K/2+a,scale=1/rate)
###########s2
rate=sum((z-X%*%theta[m,])^2)/2+b
s2[m]=1/rgamma(1,shape=IJK/2+a,scale=1/rate)
###########psi
psiCand=rnorm(K,psi[m-1,],psiCandSD)
psi[m,]=psi[m-1,]
y=exp(z) #all latent finishing times
mu=as.vector(X%*%theta[m,])
for (k in 1:K)
{
if (psiCand[k]< min(rt[sub.r==k]))
{
all=y[sub==k]+psi[m-1,k]
center=mu[sub==k]
cur=lpt0(psi[m-1,k],all,center,s2[m])
cand=lpt0(psiCand[k],all,center,s2[m])
status = rbinom(1,1,min(1,exp(cand-cur)))
psi[m,k]=ifelse(status,psiCand[k],psi[m-1,k])
psiCounter[k]=psiCounter[k]+status
}
}
print(m)
}
save(file=fileName,psi,theta,s2,alpha,beta)
save.image(file='irt3.Rdata')
View(dat)
View(B)
fileName
tail(win)
tail(t.alpha)
View(dat)
tail(t.block)
tail(z)
tail(item)
tail(sub)
tail(z.m)
tail(t.block)
fileName
t.psi
t.alpha
t.s2.beta
t.beta
t.alpha
plot(t.alpha[,1])
plot([1:80],t.alpha[,1])
plot(c(1:80),t.alpha[,1])
t.alpha[,1]
t.sens
x=[1:80]
x=c(1:80)
x
plot(x=c(1:80),y=t.alpha[,1])
plot(x=c(1:80),y=t.alpha[,1])
plot(x=c(1:80),y=t.alpha[,1])
View(dat)
cond.var
alpha
beta
theta
View(theta)
tail(theta,1)
load("/Users/jianhongshen/Documents/Lab/Project/Birds-Aug-2013/R/Expertise2_2013Data.Rdata")
tail(allData,1)
setwd("~/")
q()
source('~/Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/stanLBA/WAIC.R')
2^3
3^3
source('~/Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/stanLBA/WAIC.R')
phi_approx(0)
pnorm(0)
pnorm(2)
phi_approx(2)
install.packages("boot")
library("boot", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
phi_approx <- function(x) {
return( inv.logit(0.07056*(x^3)+1.5976*x) )
}
phi_approx(0)
phi_approx(2)
phi_approx(i) - pnorm(i)
i=4
phi_approx(i) - pnorm(i)
i=5; phi_approx(i) - pnorm(i)
source('~/Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/stanLBA/WAIC.R')
i=5; phi_approx(i) - pnorm(i)
load("/Users/jianhongshen/Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/stanLBA/lba_single_choice_3.rdata")
RT=RT
RT=data$RT
stanfit=fit
i=j=m=1
RT=RT[j,m,,]
k=k[i,j]
log_lik_sum <- extract(stanfit, "lp__")$lp__
k = extract(stanfit,"k")$k; A = extract(stanfit,"A")$A
v = extract(stanfit,"v")$v; tau = extract(stanfit,"tau")$tau
nsampl = dim(k)[1]
nsub = stanfit@par_dims$k
ncond = stanfit@par_dims$v[2]
nchoice = stanfit@par_dims$v[3]
log_lik = array(NA,dim=c(nsampl,nsub,ncond))
k=k[i,j]
A=A[i,j]
v=v[i,j,m]
v=v[i,j,m,]
s=1
tau=tau[i,j,m]
prob = rep_len(NA,ncol(RT));
b <- A + k;
for (i in 1:ncol(RT)){
t <- RT[1,i] - tau;
if(t > 0){
cdf <- 1;
for(j in 1:length(v)){
if(RT[2,i] == j){
pdf <- lba_pdf(t, b, A, v[j], s);
}else{
cdf <- lba_cdf(t, b, A, v[j], s) * cdf;
# should be (1-cdf)*cdf
}
}
prob_neg <- 1;
for(j in 1:length(v)){
prob_neg <- phi_approx(-v[j]/s) * prob_neg;
}
prob[i] <- pdf*(1-cdf);		# should be pdf*cdf
prob[i] <- prob[i]/(1-prob_neg);
if(prob[i] < 1e-10){
prob[i] <- 1e-10;
}
}else{
prob[i] <- 1e-10;
}
}
out <- sum(log(prob));
out
RT=data$RT
for (i in 1:nsampl) {
for (j in 1:nsub) {
for (m in 1:ncond) {
log_lik[i,j,m] = lba_loglik(RT[j,m,,],k[i,j],A[i,j],v[i,j,m,],s=1,tau[i,j,m])
}
}
}
k = extract(stanfit,"k")$k; A = extract(stanfit,"A")$A
v = extract(stanfit,"v")$v; tau = extract(stanfit,"tau")$tau
for (i in 1:nsampl) {
for (j in 1:nsub) {
for (m in 1:ncond) {
log_lik[i,j,m] = lba_loglik(RT[j,m,,],k[i,j],A[i,j],v[i,j,m,],s=1,tau[i,j,m])
}
}
}
str(log_lik)
sum(is.na(log_lik))
sum(!is.na(log_lik))
sum(is.na(log_lik[1,,]))
sum(log_lik[1,,])
log_lik_sum[1]
lba_pdf <- function(t, b, A, v_pdf, s) {
#PDF of the LBA model
b_A_tv_ts <- (b - A - t*v_pdf)/(t*s);
b_tv_ts <- (b - t*v_pdf)/(t*s);
term_1b <- v_pdf*pnorm(b_A_tv_ts);
term_2b <- s*exp(log(dnorm(abs(b_A_tv_ts))));
term_3b <- v_pdf*pnorm(b_tv_ts);
term_4b <- s*exp(log(dnorm(abs(b_tv_ts))));
pdf <- (1/A)*(-term_1b + term_2b + term_3b - term_4b);
return(pdf);
}
lba_cdf <- function(t, b, A, v_cdf, s){
#CDF of the LBA model
b_A_tv <- b - A - t*v_cdf;
b_tv <- b - t*v_cdf;
ts <- t*s;
term_1a <- b_A_tv/A * pnorm(b_A_tv/ts);
term_2a <- b_tv/A   * pnorm(b_tv/ts);
term_3a <- ts/A     * exp(log(dnorm(abs(b_A_tv/ts))));
term_4a <- ts/A     * exp(log(dnorm(abs(b_tv/ts))));
cdf <- 1 + term_1a - term_2a + term_3a - term_4a;
return(cdf);
}
lba_loglik <- function (RT, k, A, v, s=1, tau){
prob = rep_len(NA,ncol(RT));
b <- A + k;
for (i in 1:ncol(RT)){
t <- RT[1,i] - tau;
if(t > 0){
cdf <- 1;
for(j in 1:length(v)){
if(RT[2,i] == j){
pdf <- lba_pdf(t, b, A, v[j], s);
}else{
cdf <- lba_cdf(t, b, A, v[j], s) * cdf;
# should be (1-cdf)*cdf
}
}
prob_neg <- 1;
for(j in 1:length(v)){
prob_neg <- pnorm(-v[j]/s) * prob_neg;
}
prob[i] <- pdf*(1-cdf);		# should be pdf*cdf
prob[i] <- prob[i]/(1-prob_neg);
if(prob[i] < 1e-10){
prob[i] <- 1e-10;
}
}else{
prob[i] <- 1e-10;
}
}
out <- sum(log(prob));
return(out);
}
i=1
for (j in 1:nsub) {
for (m in 1:ncond) {
log_lik[i,j,m] = lba_loglik(RT[j,m,,],k[i,j],A[i,j],v[i,j,m,],s=1,tau[i,j,m])
}
}
sum(log_lik[1,,]-log_lik_sum[1])
sum(log_lik[1,,])
sum(log_lik[1,,])--log_lik_sum[1]
sum(log_lik[1,,])-log_lik_sum[1]
log_lik_sum <- extract(stanfit, "lp__")$lp__
sum(log_lik[1,,])-log_lik_sum[1]
sum(matrix(rnorm(100),10,10))
source('~/Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/stanLBA/WAIC.R')
waic('~/Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/stanLBA/lba_single_choice_3.rdata')
x=get_logposterior(fit)
x[[1]][1001]
log_lik_sum[1]
load("/Users/jianhongshen/Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/stanLBA/lba_single_choice_3.rdata")
source('~/Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/stanLBA/WAIC.R')
x=get_logposterior(fit)
plot(x[[1]])
plot(x[[2]])
plot(x[[3]])
plot(x[[3]][1001:2000])
plot(x[[1]][1001:2000])
plot(x[[2]][1001:2000])
rstan:::rstudio_stanc("Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/contextualEffects/ContextualEffects_individual.stan")
rstan:::rstudio_stanc("Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/contextualEffects/ContextualEffects_individual.stan")
rstan:::rstudio_stanc("Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/contextualEffects/ContextualEffects_individual.stan")
rstan:::rstudio_stanc("Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/contextualEffects/ContextualEffects_individual.stan")
rstan:::rstudio_stanc("Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/contextualEffects/ContextualEffects_individual.stan")
rstan:::rstudio_stanc("Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/contextualEffects/ContextualEffects_individual.stan")
rstan:::rstudio_stanc("Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/contextualEffects/ContextualEffects_individual.stan")
rstan:::rstudio_stanc("Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/contextualEffects/ContextualEffects_individual.stan")
rstan:::rstudio_stanc("Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/contextualEffects/ContextualEffects_individual.stan")
rstan:::rstudio_stanc("Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/contextualEffects/ContextualEffects_individual.stan")
rstan:::rstudio_stanc("Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/contextualEffects/ContextualEffects_individual.stan")
if(!require(devtools))
install.packages("devtools", repos = "http://cran.rstudio.com")
if(!require(dplyr))
install.packages("dplyr", repos = "http://cran.rstudio.com")
if(!require(ggplot2))
install.packages("ggplot2", repos = "http://cran.rstudio.com")
if(!require(reedtemplates)){
library(devtools)
devtools::install_github("ismayc/reedtemplates")
}
myTheme <- theme_update(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
plot.title = element_text(size=21),
legend.text = element_text(size = 12),
axis.text.x=element_text(size=14,color="black",vjust=1),
axis.title.x=element_text(size=21,color="black"),
axis.text.y=element_text(size=14,color="black",hjust=1),
axis.title.y=element_text(size=21,color="black",angle=90),
panel.background = element_rect(colour = "black"))
lm_eqn = function(x,y){
m = lm(y ~ x);
eq <- substitute(italic(y) == a + b %.% italic(x)*","~~italic(r)~"="~r2,
list(a = format(coef(m)[1], digits = 2),
b = format(coef(m)[2], digits = 2),
r2 = format(sqrt(summary(m)$r.squared), digits = 3)))
as.character(as.expression(eq));
}
se <- function(x) {sd(x)/sqrt(length(x))}
mean.trim = function(x) { mean(x[x<3 & x>.1]) }
require('reshape')
require('doBy')
load("/Users/jianhongshen/Documents/Courses/Course_Sem6/IRT2/Project/covariates.rdata")
load("/Users/jianhongshen/Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/GLBA/birder.covariates.Rdata")
load("/Users/jianhongshen/Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/GLBA/birder.regression.Rdata")
cor.test(behav.ind$bird.sub.rt,behav.ind$theta)
cor.test(behav.ind$residual.rt,behav.ind$theta)
cor.test(behav.ind$residual.rt.full,behav.ind$theta)
cor.test(behav.ind$residual.full.rt,behav.ind$theta)
cor.test(behav.ind$bird.sub.rt,behav.ind$theta)
cor.test(behav.ind$bird.sub.acc,behav.ind$theta)
rstan:::rstudio_stanc("Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/stanLBA/EBRW/lba_ebrw_1.stan")
rstan:::rstudio_stanc("Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/stanLBA/EBRW/lba_ebrw_1.stan")
rstan:::rstudio_stanc("Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/stanLBA/EBRW/lba_ebrw_1.stan")
rstan:::rstudio_stanc("Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/stanLBA/EBRW/lba_ebrw_1.stan")
rstan:::rstudio_stanc("Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/stanLBA/EBRW/lba_ebrw_1.stan")
rstan:::rstudio_stanc("Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/stanLBA/EBRW/lba_ebrw_1.stan")
rstan:::rstudio_stanc("Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/stanLBA/EBRW/lba_ebrw_1.stan")
rstan:::rstudio_stanc("Documents/Lab/Project/Modeling_Mar_2014/Collaboration/tutorial-code/Entry2014Data/2015/birder2/stanLBA/EBRW/lba_ebrw_1.stan")
setwd("~/Documents/Lab/Project/MDS/data/results/csv")
require('rstan')
rm(list=ls())
graphics.off()
se <- function(x) {sd(x)/sqrt(length(x))}
# Load the data (Contains subjNums, dat)
# Specify the subfolder
pathname = "."
setwd("/Applications/MAMP/htdocs/MDS")
filePattern = "*_MDS.csv"
fileNameVec = dir( path=pathname, pattern=filePattern )
setwd("/Applications/MAMP/htdocs/MDS/data")
fileNameVec = dir( path=pathname, pattern=filePattern )
nSubj = length(fileNameVec)
npairs = 210; nbird = 20
sim_index = c(7:216); id_index = c(218:237)
subj=1
#dat=NULL  # use this one if dat is a big data frame
dat=list() # use this one if dat is a list with each participant's data as an elment of the list
sim_vars = c('response','rt','stim1','stim2','bird1','bird2')
id_vars = c('response','rt','key','acc')
subnames = matrix(unlist(strsplit(fileNameVec,'_')),ncol=7,byrow = T)[,1]
sim = array(NA,dim=c(length(sim_vars),nSubj,npairs),dimnames = list(sim_vars,subnames))
id = array(NA,dim=c(length(id_vars),nSubj,nbird),dimnames = list(id_vars,subnames))
lengthn = rep_len(NA,nSubj)
for ( subj in 1:nSubj ) {
dataFileName = paste(pathname, "/", fileNameVec[subj], sep="" )
dat[[subj]] = read.csv(dataFileName,stringsAsFactors = F)
sim['response',subj,] = as.numeric(dat[[subj]]$sim_score[sim_index])
sim['rt',subj,] = dat[[subj]]$rt[sim_index]
stim_temp = dat[[subj]]$stimulus[sim_index]
sim['stim1',subj,] = matrix(unlist(strsplit(stim_temp,'"')),ncol=5,byrow=T)[,2]
sim['stim2',subj,] = matrix(unlist(strsplit(stim_temp,'"')),ncol=5,byrow=T)[,4]
sim['bird1',subj,] = matrix(unlist(strsplit(sim['stim1',subj,],'/')),ncol=3,byrow=T)[,2]
sim['bird2',subj,] = matrix(unlist(strsplit(sim['stim2',subj,],'/')),ncol=3,byrow=T)[,2]
id_temp = dat[[subj]]$responses[id_index]
id['response',subj,] = matrix(unlist(strsplit(id_temp,'"')),nrow=20,byrow = T)[,4]
lengthn[subj] = length(unlist(strsplit(id_temp, "\"")))
id['rt',subj,] = dat[[subj]]$rt[id_index]
id['key',subj,] = dat[[subj]]$answer[id_index]
id['acc',subj,] = as.numeric(id['key',subj,]==id['response',subj,])
}
subj
fileNameVec[81]
fileNameVec = dir( path=pathname, pattern=filePattern )
# Number of subjs
nSubj = length(fileNameVec)
npairs = 210; nbird = 20
sim_index = c(7:216); id_index = c(218:237)
subj=1
#dat=NULL  # use this one if dat is a big data frame
dat=list() # use this one if dat is a list with each participant's data as an elment of the list
sim_vars = c('response','rt','stim1','stim2','bird1','bird2')
id_vars = c('response','rt','key','acc')
subnames = matrix(unlist(strsplit(fileNameVec,'_')),ncol=7,byrow = T)[,1]
sim = array(NA,dim=c(length(sim_vars),nSubj,npairs),dimnames = list(sim_vars,subnames))
id = array(NA,dim=c(length(id_vars),nSubj,nbird),dimnames = list(id_vars,subnames))
lengthn = rep_len(NA,nSubj)
for ( subj in 1:nSubj ) {
dataFileName = paste(pathname, "/", fileNameVec[subj], sep="" )
dat[[subj]] = read.csv(dataFileName,stringsAsFactors = F)
sim['response',subj,] = as.numeric(dat[[subj]]$sim_score[sim_index])
sim['rt',subj,] = dat[[subj]]$rt[sim_index]
stim_temp = dat[[subj]]$stimulus[sim_index]
sim['stim1',subj,] = matrix(unlist(strsplit(stim_temp,'"')),ncol=5,byrow=T)[,2]
sim['stim2',subj,] = matrix(unlist(strsplit(stim_temp,'"')),ncol=5,byrow=T)[,4]
sim['bird1',subj,] = matrix(unlist(strsplit(sim['stim1',subj,],'/')),ncol=3,byrow=T)[,2]
sim['bird2',subj,] = matrix(unlist(strsplit(sim['stim2',subj,],'/')),ncol=3,byrow=T)[,2]
id_temp = dat[[subj]]$responses[id_index]
id['response',subj,] = matrix(unlist(strsplit(id_temp,'"')),nrow=20,byrow = T)[,4]
lengthn[subj] = length(unlist(strsplit(id_temp, "\"")))
id['rt',subj,] = dat[[subj]]$rt[id_index]
id['key',subj,] = dat[[subj]]$answer[id_index]
id['acc',subj,] = as.numeric(id['key',subj,]==id['response',subj,])
}
id_score = apply(id['acc',,],1,function(x) {sum(as.numeric(x))})
## calculate
birds = unique(sim['bird1',1,])
ind = dist_MDS = array(NA,dim=c(nSubj,nbird,nbird),dimnames = list(subnames,birds,birds))
#dist_MDS = list()
sim_same = array(NA,dim=c(nSubj,nbird),dimnames = list(subnames,birds))
for (subi in subnames) {
for (i in birds){
for (j in birds) {
ind[subi,i,j] = which((sim['bird1',subi,]==i & sim['bird2',subi,]==j) |
(sim['bird2',subi,]==i & sim['bird1',subi,]==j))
dist_MDS[subi,i,j] = dist_MDS[subi,j,i] = 7-as.numeric(sim['response',subi,ind[subi,i,j]])
}
sim_same[subi,i] = dist_MDS[subi,i,i]
}
}
dist = lapply(seq(dim(dist_MDS)[1]), function(x) dist_MDS[x,,])
cor(id_score,apply(sim_same,1,sum))
library("smacof")
data("perception")
res1 = smacofIndDiff(dist, constraint = "indscal", ndim=3)   ## diagonally restricted weights
summary(res1)
xy <- res1$gspace
require('jpeg')
ims = dir(path="/Applications/MAMP/htdocs/MDS/img",pattern='0*.jpg',recursive = T)
tmp = matrix(unlist(strsplit(ims,split='[/.]')),nrow=length(ims),byrow=T)
ims_plot = list()
for (i in 1:length(birds)) {
birdi = birds[i]
imsi = ims[sample(which(tmp[,1]==birdi,arr.ind = T),1)]
ims_plot[[i]] = readJPEG(paste("/Applications/MAMP/htdocs/MDS/img/",imsi,sep=""))
}
thumbnails <- function(x, y, images, width = 0.1*diff(range(x)),
height = 0.1*diff(range(y))){
# images <- replicate(length(x), images, simplify=FALSE)
stopifnot(length(x) == length(y))
for (ii in seq_along(x)){
rasterImage(images[[ii]], xleft=x[ii] - 0.5*width,
ybottom= y[ii] - 0.5*height,
xright=x[ii] + 0.5*width,
ytop= y[ii] + 0.5*height, interpolate=FALSE)
}
}
pdf(file="../mds.pdf")
plot(xy[,c(1,2)], t="n")
thumbnails(xy[,1], xy[,2], ims_plot)
plot(xy[,c(1,3)], t="n")
thumbnails(xy[,1], xy[,3], ims_plot)
plot(xy[,c(2,3)], t="n")
thumbnails(xy[,2], xy[,3], ims_plot)
dev.off()
