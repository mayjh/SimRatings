t = ii+(i-1)*(i-2)/2
for (k in 1:K) {
for (j in 1:J) {
d_tmp[k,h,t,j] = W[k,h,j]*( X[i,j,k]-X[ii,j,k])^2
}
d[k,h,t] = sqrt( sum(d_tmp[k,h,t,]) )
}
Y[h,t] = rnorm(1,d[u[h],h,t],sigma_Y)
while (Y[h,t]<0) Y[h,t] = rnorm(1,d[u[h],h,t],sigma_Y)
}
}
}
data = list(H=H, I=I, Ipairs=Ipairs, J=J, K=K, Y=Y)
fit <- vb(object = model_cmp,data=data,iter=50000,tol_rel_obj=.01)
mcmc_chain = as.matrix(fit)
niter = (fit@sim$iter-fit@sim$warmup)*fit@sim$chains
# label switching
u_post = array(NA,dim=c(niter,H,K))
for (h in 1:H) {
for (k in 1:K) {
u_post[,h,k] = mcmc_chain[,paste('u[',h,',',k,']',sep='')]
}
}
run = stephens(u_post)
order_prmt = run$permutations # permutation order
tmp = tmp_order = array(NA,dim=c(niter,K))
# group membership
ind_u = 2-apply(u_post[,1:H,1],2,mean)
plot(ind_u)
ind_u = round(ind_u)
ind_u = round(ind_u)
ind_u
rm(list=ls())
require(rstan)
require(label.switching)
#########data simulation#########
H = 14 # number of subjects
I = 12 # number of stimuli
Ipairs = I*(I-1)/2
J = 2 # number of dimensions
K = 2 # number of classes
u = rep_len(1,H) # group membership for each subject
u[8:14] = 2
### coordinates, choose one
# coordinates different between classes
# X = array(NA,dim=c(I,J,K))
# X[,,1] = rnorm(I*J,0,sd=3); X[,,2] = rnorm(I*J,2,sd=3)
#coordinates same between classes
X = array(rnorm(I*J*K,0,sd=3),dim=c(I,J,K))
### weights, choose one
W = array(NA,dim=c(K,H,J))  # attention weights on the first dimension
# weights different across classes
#w1 = array(NA,dim=c(K,H))
#w1[1,] = rnorm(H,0.7,1); w1[2,] = rnorm(H,0.8,1)
# weights same across classes
w1 = array(runif(K*H,min=0,max=2),dim=c(K,H))  # attention weights on the first dimension
w2 = 2-w1 # attention weights on the second dimension
W[,,1] = w1; W[,,2] = w2;
d = array(NA,dim=c(K,H,Ipairs)) # distance
Y = array(NA,dim=c(H,Ipairs)) # data: ratings
sigma_Y = 0.2
for (h in 1:H) {
for (i in 2:I) {
for (ii in 1:(i-1)) {
t = ii+(i-1)*(i-2)/2
for (k in 1:K) {
d[k,h,t] = sqrt( W[k,h,1]*(X[i,1,k]-X[ii,1,k])^2 + W[k,h,2]*(X[i,2,k]-X[ii,2,k])^2 )
}
Y[h,t] = rnorm(1,d[u[h],h,t],sigma_Y)
while (Y[h,t]<0) Y[h,t] = rnorm(1,d[u[h],h,t],sigma_Y)
}
}
}
data = list(H=H, I=I, Ipairs=Ipairs, J=J, K=K, Y=Y)
model = '~/Documents/Lab/Project/MDS/stan/MDS_1.stan'
warmup = 1000
iter = 2000
chains = 3
#
# #run the model using ADVI
model_cmp = stan_model(file = model,verbose = T)
fit <- vb(object = model_cmp,data=data,iter=50000,tol_rel_obj=.01)
mcmc_chain = as.matrix(fit)
niter = (fit@sim$iter-fit@sim$warmup)*fit@sim$chains
# label switching
u_post = array(NA,dim=c(niter,H,K))
for (h in 1:H) {
for (k in 1:K) {
u_post[,h,k] = mcmc_chain[,paste('u[',h,',',k,']',sep='')]
}
}
run = stephens(u_post)
order_prmt = run$permutations # permutation order
tmp = tmp_order = array(NA,dim=c(niter,K))
# group membership
ind_u = 2-apply(u_post[,1:H,1],2,mean)
plot(ind_u)
ind_u = round(ind_u)
source('~/Documents/Lab/Project/MDS/stan/MDS_simulation_1.R')
mcmc_chain = as.matrix(fit)
niter = (fit@sim$iter-fit@sim$warmup)*fit@sim$chains
# label switching
u_post = array(NA,dim=c(niter,H,K))
for (h in 1:H) {
for (k in 1:K) {
u_post[,h,k] = mcmc_chain[,paste('u[',h,',',k,']',sep='')]
}
}
run = stephens(u_post)
order_prmt = run$permutations # permutation order
tmp = tmp_order = array(NA,dim=c(niter,K))
# group membership
ind_u = 2-apply(u_post[,1:H,1],2,mean)
plot(ind_u)
ind_u = round(ind_u)
# coordinate locations
# X_post: posterior prediction of X, X_ordered: X_post ordered based on label switching
X_post = X_ordered = array(NA,dim=c(I,J,K))
for (i in 1:I) {
for (j in 1:J) {
for (k in 1:K) {
tmp[,k] = tmp_order[,k] = mcmc_chain[,paste('X[',i,',',j,',',k,']',sep='')]
}
for (m in 1:niter) tmp_order[m,] = tmp[m,order_prmt[m,]]
X_post[i,j,] = colMeans(tmp)
X_ordered[i,j,] = colMeans(tmp_order)
}
}
ind_post_X = ind_ordered_X = array(NA,dim=c(J*K,2))
X_c = X_post_c = X_ordered_c = NULL
for (j in 1:J) {
for (k in 1:K) {
t = J*(j-1)+k
# find the dim j and group k in X_post that matches X[j,k] the best
ind_post_X[t,] = arrayInd(which.max(abs(apply(X_post,c(2,3),cor,y=X[,j,k]))),.dim = c(J,K))
# get the sign of the matching cell
# (since the diff was squared, X might be either positive or negative)
X_tmp = X_post[,ind_post_X[t,1],ind_post_X[t,2]]
sign_tmp = sign(cor(X[,j,k],X_tmp))
X_post_c = c(X_post_c,sign_tmp*X_tmp)
ind_ordered_X[t,] = arrayInd(which.max(abs(apply(X_ordered,c(2,3),cor,y=X[,j,k]))),.dim = c(J,K))
X_tmp = X_ordered[,ind_ordered_X[t,1],ind_ordered_X[t,2]]
sign_tmp = sign(cor(X[,j,k],X_tmp))
X_ordered_c = c(X_ordered_c,sign_tmp*X_tmp)
X_c = c(X_c,X[,j,k])
}
}
j
k
t = J*(j-1)+k
t
ind_post_X[t,]
t
str(ind_post_X)
J
K
apply(X_post,c(2,3),cor,y=X[,j,k])
for (j in 1:J) {
for (k in 1:K) {
print(J*(j-1)+k)}}
K
J
for (j in 1:J) {
for (k in 1:K) {
print(K*(j-1)+k)}}
for (j in 1:2) {
for (k in 1:3) {
print(K*(j-1)+k)}}
for (j in 1:2) {
for (k in 1:3) {
print(3*(j-1)+k)}}
for (j in 1:2) {
for (k in 1:3) { for (m in 1:4)
print(4*(k-1)+12*(j-1)+k)}}
for (j in 1:2) {
for (k in 1:3) { for (m in 1:4)
print(4*(k-1)+12*(j-1)+m)}}
t = K*(j-1)+k
# find the dim j and group k in X_post that matches X[j,k] the best
ind_post_X[t,] = arrayInd(which.max(abs(apply(X_post,c(2,3),cor,y=X[,j,k]))),.dim = c(J,K))
ind_post_X = ind_ordered_X = array(NA,dim=c(J*K,2))
X_c = X_post_c = X_ordered_c = NULL
for (j in 1:J) {
for (k in 1:K) {
t = K*(j-1)+k
# find the dim j and group k in X_post that matches X[j,k] the best
ind_post_X[t,] = arrayInd(which.max(abs(apply(X_post,c(2,3),cor,y=X[,j,k]))),.dim = c(J,K))
# get the sign of the matching cell
# (since the diff was squared, X might be either positive or negative)
X_tmp = X_post[,ind_post_X[t,1],ind_post_X[t,2]]
sign_tmp = sign(cor(X[,j,k],X_tmp))
X_post_c = c(X_post_c,sign_tmp*X_tmp)
ind_ordered_X[t,] = arrayInd(which.max(abs(apply(X_ordered,c(2,3),cor,y=X[,j,k]))),.dim = c(J,K))
X_tmp = X_ordered[,ind_ordered_X[t,1],ind_ordered_X[t,2]]
sign_tmp = sign(cor(X[,j,k],X_tmp))
X_ordered_c = c(X_ordered_c,sign_tmp*X_tmp)
X_c = c(X_c,X[,j,k])
}
}
print('X: One-to-one maximal relationship?')
print(sum(sort(which(!is.na(X[1,,]),arr.ind = T))==sort(ind_post_X))==J*K*2)
print(sum(sort(which(!is.na(X[1,,]),arr.ind = T))==sort(ind_ordered_X))==J*K*2)
matplot(X_c,cbind(X_post_c,X_ordered_c))
print('cor(X):')
print(cor(cbind(X_c,X_post_c,X_ordered_c)))
print(cor(cbind(X[,1,1],X[,1,2],X[,2,1],X[,2,2]),
cbind(X_ordered[,1,1],X_ordered[,1,2],X_ordered[,2,1],X_ordered[,2,2])))
ind_post_X
W_post = W_ordered = array(NA,dim=c(K,H,J))
for (j in 1:J) {
for (h in 1:H) {
for (k in 1:K) {
tmp[,k] = tmp_order[,k] = mcmc_chain[,paste('W[',k,',',h,',',j,']',sep='')]
}
for (m in 1:niter) tmp_order[m,] = tmp[m,order_prmt[m,]]
W_post[,h,j] = colMeans(tmp)
W_ordered[,h,j] = colMeans(tmp_order)
}
}
ind_post_W = ind_ordered_W = NULL
W_c = W_post_c = W_ordered_c = W_post_cbind = W_ordered_cbind = NULL;
grp = list()
for (k in 1:K) grp[[k]] = which(ind_u==k)
for (k in 1:K) {
for (j in 1:J) {
for (g in 1:K) {
W_post_cbind = cbind(W_post_cbind,W_post[k,grp[[g]],j])
W_ordered_cbind = cbind(W_ordered_cbind,W_post[k,grp[[g]],j])
}
}
}
for (k in 1:K) {
for (j in 1:J) {
# find the dim j and group k in X_post that matches X[j,k] the best
t = which.max(cor(W[k,which(u==k),j],W_post_cbind))
ind_post_W = c(ind_post_W,t)
W_post_c = c(W_post_c,W_post_cbind[,t])
t = which.max(cor(W[k,which(u==k),j],W_ordered_cbind))
ind_ordered_W = c(ind_ordered_W,t)
W_ordered_c = c(W_ordered_c,W_ordered_cbind[,t])
W_c = c(W_c,W[k,which(u==k),j])
}
}
matplot( W_c, cbind( W_post_c, W_ordered_c ) )
print('cor(W):')
print(cor( cbind( c( W_c), c(W_post_c), c(W_ordered_c) ) ))
# Y_pred
Y_pred = array(NA,dim=c(K,H,Ipairs))
Y_post = array(NA,dim=c(H,Ipairs))
for (t in 1:Ipairs) {
for (h in 1:H) {
for (k in 1:K) {
Y_pred[k,h,t] = mean(mcmc_chain[,paste('Y_pred[',k,',',h,',',t,']',sep='')])
}
Y_post[h,t] = Y_pred[ind_u[h],h,t]
}
}
plot(c(Y),c(Y_post))
print(c('cor(c(Y),c(Y_post)):',cor(c(Y),c(Y_post))))
source('~/Documents/Lab/Project/MDS/stan/MDS_simulation_1.R')
load("~/Documents/Lab/Project/MDS/stan/fit_1/fit_dim_2_grp_1.Rdata")
log_lik=extract_log_lik(x,'ps')
library("rstan", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
log_lik=extract_log_lik(x,'ps')
library("loo", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
log_lik=extract_log_lik(x,'ps')
loo1 <- loo(log_lik)
c(loo1$elpd_loo,loo1$p_loo,loo1$looic)
waic1 <- waic(log_lik)
c(waic1$elpd_waic,waic1$p_waic,waic1$waic)
source('~/Documents/Lab/Project/MDS/stan/MDS_simulation_1.R')
cor_X[run] = cor(X_c, X_post_c)
run
source('~/Documents/Lab/Project/MDS/stan/MDS_simulation_1.R')
ver
load("~/Documents/Lab/Project/MDS/data/results/dat_MDS.Rdata")
View(birdsc)
dimnames(dist_MDS)
dist_MDS[1:10,2,2]
View(birdsc)
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv
)
nb
""
"
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv")
View(nba)
install.packages("RMySQL")
mydb = dbConnect(MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='host')
library("RMySQL", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("RMySQL", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
mydb = dbConnect(MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='host')
mydb = dbConnect(MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='10.223.9.50:3306')
mydb = dbConnect(MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='10.223.9.50')
mydb = dbConnect(MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='http://expertise.psy.vanderbilt.edu/hiddendb')
mydb = dbConnect(MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='expertise.psy.vanderbilt.edu/hiddendb')
con <- dbConnect(RMySQL::MySQL(), dbname = "test")
mydb = dbConnect(MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='10.223.9.50')
mydb = dbConnect(RMySQL::MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='10.223.9.50')
mydb = dbConnect(RMySQL::MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='expertise.psy.vanderbilt.edu/hiddendb')
mydb = dbConnect(RMySQL::MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='expertise.psy.vanderbilt.edu')
mydb = dbConnect(RMySQL::MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='expertise.psy.vanderbilt.edu')
mydb = dbConnect(RMySQL::MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='expertise.psy.vanderbilt.edu/hiddendb')
mydb = dbConnect(RMySQL::MySQL(), user='root', password='C@tl@b2016!', dbname='experiment2', host='129.59.231.105')
load("/Applications/MAMP/htdocs/VanderbiltBirdExpertiseTest/Results/covariates.rdata")
person$age
install.packages("greport")
rm(list=ls())
graphics.off()
se <- function(x) {sd(x)/sqrt(length(x))}
pathname = "."
filePattern = "*_MDS.csv"
imClass = read.csv('/Users/jianhongshen/Documents/Lab/Farrell Bird Images/cub_format_new/imClass.csv',
stringsAsFactors = F)
fileNameVec = dir( path=pathname, pattern=filePattern )
nSubj = length(fileNameVec)
npairs = 210; nbird = 20
sim_index = c(7:216); id_index = c(218:237)
subj=1
dat=list() # use this one if dat is a list with each participant's data as an elment of the list
sim_vars = c('response','rt','stim1','stim2','bird1','bird2')
id_vars = c('response','rt','key','acc')
subnames = matrix(unlist(strsplit(fileNameVec,'_')),ncol=7,byrow = T)[,1]
setwd("/Applications/MAMP/htdocs/MDS/data/v3")
rm(list=ls())
graphics.off()
se <- function(x) {sd(x)/sqrt(length(x))}
pathname = "."
filePattern = "*_MDS.csv"
imClass = read.csv('/Users/jianhongshen/Documents/Lab/Farrell Bird Images/cub_format_new/imClass.csv',
stringsAsFactors = F)
fileNameVec = dir( path=pathname, pattern=filePattern )
nSubj = length(fileNameVec)
npairs = 210; nbird = 20
sim_index = c(7:216); id_index = c(218:237)
subj=1
dat=list() # use this one if dat is a list with each participant's data as an elment of the list
sim_vars = c('response','rt','stim1','stim2','bird1','bird2')
id_vars = c('response','rt','key','acc')
subnames = matrix(unlist(strsplit(fileNameVec,'_')),ncol=7,byrow = T)[,1]
sim = array(NA,dim=c(length(sim_vars),nSubj,npairs),dimnames = list(sim_vars,subnames))
id_post = array(NA,dim=c(length(id_vars),nSubj,nbird),dimnames = list(id_vars,subnames))
lengthn = rep_len(NA,nSubj)
for ( subj in 1:nSubj ) {
dataFileName = paste(pathname, "/", fileNameVec[subj], sep="" )
dat[[subj]] = read.csv(dataFileName,stringsAsFactors = F)
sim['response',subj,] = as.numeric(dat[[subj]]$sim_score[sim_index])
sim['rt',subj,] = dat[[subj]]$rt[sim_index]
stim_temp = dat[[subj]]$stimulus[sim_index]
sim['stim1',subj,] = matrix(unlist(strsplit(stim_temp,'"')),ncol=5,byrow=T)[,2]
sim['stim2',subj,] = matrix(unlist(strsplit(stim_temp,'"')),ncol=5,byrow=T)[,4]
sim['bird1',subj,] = matrix(unlist(strsplit(sim['stim1',subj,],'/')),ncol=3,byrow=T)[,2]
sim['bird2',subj,] = matrix(unlist(strsplit(sim['stim2',subj,],'/')),ncol=3,byrow=T)[,2]
id_temp = dat[[subj]]$responses[id_index]
id_post['response',subj,] = matrix(unlist(strsplit(id_temp,'"')),nrow=20,byrow = T)[,4]
lengthn[subj] = length(unlist(strsplit(id_temp, "\"")))
id_post['rt',subj,] = dat[[subj]]$rt[id_index]
id_post['key',subj,] = dat[[subj]]$answer[id_index]
id_post['acc',subj,] = as.numeric(id_post['key',subj,]==id_post['response',subj,])
}
dimnames(id_post)[[3]] = id_post['key',subj,]
id_score = apply(id_post['acc',,],1,function(x) {sum(as.numeric(x))})
birds = unique(sim['bird1',1,])
birdsc = unique(imClass[imClass$class %in% as.numeric(birds),c('class','H1label')])
birdsc$classc = paste("0",birdsc$class,sep="")
rownames(birdsc) = birdsc$H1label
ind = dist_MDS = id_postMDS = array(0,dim=c(nSubj,nbird,nbird),dimnames = list(subnames,birds,birds))
sim_same = array(NA,dim=c(nSubj,nbird),dimnames = list(subnames,birds))
for (subi in subnames) {
for (i in birds){
for (j in birds) {
ind[subi,i,j] = which((sim['bird1',subi,]==i & sim['bird2',subi,]==j) |
(sim['bird2',subi,]==i & sim['bird1',subi,]==j))
dist_MDS[subi,i,j] = dist_MDS[subi,j,i] = as.numeric(sim['response',subi,ind[subi,i,j]])
}
bird_i = as.character(birdsc[birdsc$classc==i,'H1label'])
choice_i = id_post['response',subi,bird_i]
if (!choice_i=="NA") id_postMDS[subi,i,birdsc[choice_i,'classc']] = 1
sim_same[subi,i] = dist_MDS[subi,i,i]
}
}
Ratings = 8-dist_MDS
npair = nbird*(nbird-1)/2
Ratings_flat = array(NA,dim = c(nSubj,npair),dimnames = list(subnames))
for (i in 2:nbird){
for (j in 1:(i-1)){
t <- j+(i-1)*(i-2)/2
for (subi in subnames){
Ratings_flat[subi,t] <- Ratings[subi,i,j]
}
}
}
sd_Ratings = apply(Ratings_flat,1,sd)
mean_R_diag = apply(dist_MDS,1,function(x){mean(diag(x))})
sd_R_diag = apply(dist_MDS,1,function(x){sd(diag(x))})
hist(mean_R_diag)
count_7 = apply(Ratings_flat,1,function(x){sum(x>5)})
count_7 = apply(Ratings_flat,1,function(x){sum(x>5)})
cor(count_7,id_score)
cor.test(count_7,id_score)
count_1 = apply(Ratings_flat,1,function(x){sum(x<3)})
cor.test(count_1,id_score)
plot(count_1,id_score)
plot(id_score,count_1)
min_count = apply(Ratings_flat,1,function(x){min(table(x))})
min_count
min_count = apply(Ratings_flat,1,function(x){min(table(x))})
print(which(min_count<5))
for (i in x) {hist(Ratings_flat[i,],main=paste('Sub:',subnames[i],', Score:',id_score[i]))}
x=which(min_count<5)
col_count = apply(Ratings_flat,1,function(x){length(table(x))})
print(which(col_count<7))
View(Ratings_flat)
Ratings_flat['1646','0868','0901']
Ratings['1646','0868','0901']
Ratings['1646','0758','0758']
rt = sim['rt',,]; rt_Ratings = apply(rt,1,function(x) mean(as.numeric(x)))
View(rt)
rt['1646',]
rt = sim['rt',,]+0
View(rt)
rt[,1]=as.numeric(rt[,1])
View(rt)
str(rt)
rt[,1]+1
rt[,1]=as.numeric(rt[,1])
str(rt[,1])
nSubj
npair
npairs
rt = array(NA,c(nSubj,npair))
rt = array(NA,dim=c(nSubj,npair),dimnames=list(subnames))
as.numeric(sim['rt',subi,])
str(as.numeric(sim['rt',subi,]))
for (subi in subnames) rt[subi,] = as.numeric(sim['rt',subi,])
rt = array(NA,dim=c(nSubj,npair),dimnames=list(subnames))
for (subi in subnames) rt[subi,] = as.numeric(sim['rt',subi,])
rt = array(NA,dim=c(nSubj,npairs),dimnames=list(subnames))
for (subi in subnames) rt[subi,] = as.numeric(sim['rt',subi,])
View(rt)
sum(rt>10000)
rt_Ratings = apply(rt,1,mean)
sum(rt_Ratings>10000)
rt[rt>10000]
rt[rt>20000]
which(rt==74435176,arr.ind = T)
hist(rt[12,])
sum(rt[12,]>10000)
rt[(rt[12,]>10000)]
rt[which(rt[12,]>10000)]
rt[12,][which(rt[12,]>10000)]
min(rt)
min(rt_Ratings)
which.min(rt_Ratings)
hist(rt[37,])
min(rt[37,])
head(sort(rt))
which.min(rt)
which.min(rt)
arrayInd(which.min(rt))
which(rt==min(rt),arr.ind = )
which(rt==min(rt),arr.ind = T)
sort(rt[106,])
which(rt==(head(sort(rt))[2]),arr.ind = T)
sort(rt[96,])
id_score[96,]
id_score[96]
hist(rt[96,])
hist(rt[96,rt[96,]<10000])
nLE500 = apply(rt,1,function(x){sum(x<500)})
table(nLE500)
which.max(nLE500)
nLE1000 = apply(rt,1,function(x){sum(x<1000)})
table(nLE1000)
which(nLE!=0)
which(nLE1000!=0)
which(nLE1000!>1)
which(nLE1000>1)
hist(rt[7,])
sort(rt[7,])
nLE1000[c(7,96)]
id_score[c(7,96)]
rt_mean = apply(rt,1,mean)
which(rt_mean>10000)
id_score[which(rt_mean>10000)]
rt_median = apply(rt,1,median)
hist(rt_median)
sort(rt_median)
which.min(rt_median)
hist(rt[37,])
sort(rt[37,])
id_score[37]
nGE5000 = apply(rt,1,function(x){sum(x>5000)})
nGE10000 = apply(rt,1,function(x){sum(x>10000)})
table(nGE10000)
table(nGE5000)
nGE10000 = apply(rt,1,function(x){sum(x>10000)})
nGE50000 = apply(rt,1,function(x){sum(x>50000)})
table(nGE50000)
table(nGE10000)
which.max(nGE10000)
sort(rt[22,])
subnames[17]
table(nGE10000)
hist(rt[17,])
table(nLE1000)
which(nGE10000==12)
hist(rt[47,])
hist(rt[47,rt[47,]<20000])
hist(rt[47,])
hist(rt[64,])
hist(rt[64,rt[64,]<20000])
